<div class="content">
  <div class="page-header">
    <h2>API Documentation</h2>
    <small>Here you can find how to use the API for sending the exceptions from your application.</small>
  </div>
  <!--/ .page-header -->
  <div class="row">
    <div class="col-md-3">
      <div>
        <ul class="nav nav-stacked">
          <li><a href="#grid-intro">Overview</a></li>
          <li><a href="#grid-intro-2">Continue</a></li>
        </ul>

      </div>
    </div>
    <!--/ .col-md-4 -->

    <div class="col-md-9">
      <p class="lead">Bootstrap includes a responsive, mobile first fluid grid system that appropriately scales up to 12 columns as the device or viewport size increases. It includes <a href="#grid-example-basic">predefined classes</a> for easy layout options, as well as powerful <a href="#grid-less">mixins for generating more semantic layouts</a>.</p>
      <h3 id="grid-intro">Introduction</h3>
      <p>Grid systems are used for creating page layouts through a series of rows and columns that house your content. Here's how the Bootstrap grid system works:</p>
      <ul>
        <li>Rows must be placed within a <code>.container</code> for proper alignment and padding.</li>
        <li>Use rows to create horizontal groups of columns.</li>
        <li>Content should be placed within columns, and only columns may be immediate children of rows.</li>
        <li>Predefined grid classes like <code>.row</code> and <code>.col-xs-4</code> are available for quickly making grid layouts. LESS mixins can also be used for more semantic layouts.</li>
        <li>Columns create gutters (gaps between column content) via <code>padding</code>. That padding is offset in rows for the first and last column via negative margin on <code>.row</code>s.</li>
        <li>Grid columns are created by specifying the number of twelve available columns you wish to span. For example, three equal columns would use three <code>.col-xs-4</code>.</li>
      </ul>
      <p>Look to the examples for applying these principles to your code.</p>
      <div class="bs-callout bs-callout-info">
        <h4>Grids and full-width layouts</h4>
        <p>Folks looking to create fully fluid layouts (meaning your site stretches the entire width of the viewport) must wrap their grid content in a containing element with <code>padding: 0 15px;</code> to offset the <code>margin: 0 -15px;</code> used on <code>.row</code>s.</p>
      </div>
      <h3>Media Queries</h3>
      <div class="highlight"><pre><code class="css"><span class="c">/* Extra small devices (phones, less than 768px) */</span>
      <span class="c">/* No media query since this is the default in Bootstrap */</span>

      <span class="c">/* Small devices (tablets, 768px and up) */</span>
      <span class="k">@media</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="k">@screen-sm-min</span><span class="o">)</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>

      <span class="c">/* Medium devices (desktops, 992px and up) */</span>
      <span class="k">@media</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="k">@screen-md-min</span><span class="o">)</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>

      <span class="c">/* Large devices (large desktops, 1200px and up) */</span>
      <span class="k">@media</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="k">@screen-lg-min</span><span class="o">)</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
      </code></pre></div>

      <h3 id="grid-intro-2">Introduction</h3>
      <p>Grid systems are used for creating page layouts through a series of rows and columns that house your content. Here's how the Bootstrap grid system works:</p>
      <ul>
        <li>Rows must be placed within a <code>.container</code> for proper alignment and padding.</li>
        <li>Use rows to create horizontal groups of columns.</li>
        <li>Content should be placed within columns, and only columns may be immediate children of rows.</li>
        <li>Predefined grid classes like <code>.row</code> and <code>.col-xs-4</code> are available for quickly making grid layouts. LESS mixins can also be used for more semantic layouts.</li>
        <li>Columns create gutters (gaps between column content) via <code>padding</code>. That padding is offset in rows for the first and last column via negative margin on <code>.row</code>s.</li>
        <li>Grid columns are created by specifying the number of twelve available columns you wish to span. For example, three equal columns would use three <code>.col-xs-4</code>.</li>
      </ul>
      <p>Look to the examples for applying these principles to your code.</p>
      <div class="bs-callout bs-callout-info">
        <h4>Grids and full-width layouts</h4>
        <p>Folks looking to create fully fluid layouts (meaning your site stretches the entire width of the viewport) must wrap their grid content in a containing element with <code>padding: 0 15px;</code> to offset the <code>margin: 0 -15px;</code> used on <code>.row</code>s.</p>
      </div>
    </div>
    <!--/ .col-md-8 -->
  </div>
  <!--/ .row -->

  
</div>
<!--/ .content -->