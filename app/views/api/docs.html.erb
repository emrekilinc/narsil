<div class="content">
  <div class="page-header">
    <h2>API Documentation</h2>
    <small>Here you can find how to use the API for sending the errors from your application.</small>
  </div>
  <!--/ .page-header -->
  <div class="row">
    <div class="col-md-3">
      <div>
        <ul class="nav nav-stacked">
          <li><a href="#rest-api">RESTful API</a></li>
          <li><a href="#wrappers">Wrappers</a></li>
        </ul>

      </div>
    </div>
    <!--/ .col-md-4 -->

    <div class="col-md-9">
      <p class="lead">
        <strong>Narsil</strong> has an API which you can use to post the errors in your applications. Right now it only supports creating errors, not deleting or updating or getting them. Below you can find information about how to properly post data, how you can authenticate the wrapper of appropriate language.
      </p>

      <h3 id="rest-api">Creating an Error</h3>
      <p>
        For posting an error to Narsil, you will need a project code. This code is a unique identifier of the project. You <u>cannot post an error</u> without supplying the project code. Here are the columns that you will need to provide when you are creating an error.
      </p>
      <ul>
        <li><code><strong>project_code (*)</strong></code> Narsil need a project_code to create an error. Before posting errors here you have to create a project in the "Projects" section above in the menu. After creating the project you can get the project code from the detail page.</li>
        <li><code><strong>message (*)</strong></code> This is a short explanation of the error that's been occured. Please do not post the full stack trace here. An error <u>cannot be created</u> without the message property.</li>
        <li><code><strong>url</strong></code> Url of the page of the request that caused the error.</li>
        <li><code><strong>where</strong></code> Class, method or file information of the error.</li>
        <li><code><strong>occured_at (*)</strong></code> Time of the error as UTC.</li>
        <li><code><strong>browser</strong></code> The browser agent information of the error if it is a web application.</li>
        <li><code><strong>ip</strong></code> IP address of the client if it is a web application.</li>
        <li><code><strong>backtrace</strong></code> Full stack trace of the error. It's always useful to save the backtrace/stack trace of the error to get a full understanding of the error.</li>
      </ul>

      <p>Columns specified with <code>(*)</code> are mandatory.</p>

      <div class="bs-callout bs-callout-info">
        <h4>Rate Limits</h4>
        <p>There are no rate limits of using the API right now. <strong>So please do not give away the API key to our customers or anyone.</strong></p>
      </div>

      <h4>Testing</h4>
      <p>To test it with <code>curl</code> you can use the command below.</p>

      <div class="highlight"><pre><code>curl -X POST -d "project_code=3dkonut&message=errormessg&occured_at=25/07/2013" http://localhost:5555/api/error -H 'Authorization: Token token="1847d0607e9daa5457988faba2f545dd"'</code></pre></div>

      <h3 id="wrappers">Wrappers</h3>
      <p>To use Narsil API in your applications, we've developed API wrappers for Ruby and .NET. Feel free to write a wrapper in any language/framework you want. Here are the basic codes to consume the Narsil API.</p>
      
      <h4>Ruby (on Rails)</h4>
      <div class="highlight"><pre><code class="ruby">require 'net/http'
require 'uri'

class NarsilWrapper
  ACCESS_TOKEN = "c55112c8a981bbf118649a7a8a700e71"

  def self.log(create_params)
    uri = URI.parse("http://dashboard.2nworks.com/api/error")
    http = Net::HTTP.new(uri.host, uri.port)
    token = ActionController::HttpAuthentication::Token.encode_credentials(ACCESS_TOKEN)
    
    request = Net::HTTP::Post.new(uri.request_uri)
    request["Authorization"] = token

    request.set_form_data({
      "project_code" => create_params[:project_code],
      "message" => create_params[:message],
      "url" => create_params[:url],
      "where" => create_params[:where],
      "occured_at" => create_params[:occured_at],
      "browser" => create_params[:browser],
      "ip" => create_params[:ip],
      "backtrace" => create_params[:backtrace]
    })

    response = http.request(request)
  end
end</code></pre></div>
    <p>To use this in your projects, create a file with the name of <code>narsil.rb</code>, and in your <code>application_controller.rb</code> file</p>

          <div class="highlight"><pre><code class="ruby">rescue_from StandardError do |e|
  create_params = {
    project_code: PROJECT_CODE,
    message: e.message,
    occured_at: Time.zone.now,
    where: e.class,
    backtrace: e.backtrace.join("\n"),
    url: request.url,
    ip: request.remote_ip,
    browser: browser.name
  }
  NarsilWrapper.log(create_params)
  redirect_to error_url
end</code></pre></div>

    </div>
    <!--/ .col-md-8 -->
  </div>
  <!--/ .row -->

  
</div>
<!--/ .content -->